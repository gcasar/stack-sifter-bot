# This workflow runs the StackSifter console app every hour
name: Run StackSifter Hourly

on:
  schedule:
    - cron: '0 * * * *' # every hour
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore ./src/StackSifter/StackSifter.csproj

      - name: Build
        run: dotnet build --configuration Release ./src/StackSifter/StackSifter.csproj

      - name: Run StackSifter
        id: run_stack_sifter
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Try to checkout last-run.txt from the remote branch without switching
          git fetch origin data-run-information
          git checkout origin/data-run-information -- last-run.txt || true
          if [ -f last-run.txt ]; then
            PREV=$(cat last-run.txt)
          else
            PREV=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          fi
          # Optionally revert the file after use
          git restore last-run.txt || true

          # Run and capture output to determine the last processed timestamp
          OUTPUT=$(dotnet run --project ./src/StackSifter/StackSifter.csproj --configuration Release -- "$PREV")
          echo "$OUTPUT"

          # Extract the last Created timestamp from the JSON output, or use PREV if no output
          if [ "$(echo "$OUTPUT" | jq 'length')" -eq 0 ]; then
            LAST_CREATED="$PREV"
            echo "No posts found, keeping previous checked value $PREV"
          else
            # Save the output for persistence with timestamp to avoid overwriting
            OUTPUT_FILE="last-output-$(date -u +'%Y%m%dT%H%M%SZ').json"
            echo "$OUTPUT" > "$OUTPUT_FILE"
            LAST_CREATED=$(echo "$OUTPUT" | jq -r '.[-1].Created')
          fi
          echo "LAST_PROCESSED_TIMESTAMP=$LAST_CREATED" >> $GITHUB_ENV
          echo "Last processed timestamp: $LAST_CREATED"

      - name: Persist last run information
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin data-run-information || git checkout -b data-run-information
          git checkout -B data-run-information origin/data-run-information || git checkout -b data-run-information
          # Update last-run.txt and last-output-*.json (if it exists) and commit them to the data-run-information branch only
          echo "$LAST_PROCESSED_TIMESTAMP" > last-run.txt
          git add last-run.txt
          # Add any last-output-*.json files created in this run
          for f in last-output-*.json; do
            if [ -f "$f" ]; then
              git add "$f"
            fi
          done
          git commit -m "chore: update last run timestamp and output [skip ci]" || echo "No changes to commit"
          git pull --rebase origin data-run-information || true
          git push origin data-run-information
          echo "Last run timestamp and output updated to: $LAST_PROCESSED_TIMESTAMP"
